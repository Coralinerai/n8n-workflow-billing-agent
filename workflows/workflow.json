{
  "name": "workflow_test",
  "nodes": [
    {
      "parameters": {
        "queue": "factures_a_traiter",
        "options": {
          "jsonParseBody": true,
          "onlyContent": true
        }
      },
      "type": "n8n-nodes-base.rabbitmqTrigger",
      "typeVersion": 1,
      "position": [
        -3800,
        815
      ],
      "id": "d8b508b8-8bb9-488c-b3f9-15a304ab7119",
      "name": "RabbitMQ Trigger",
      "credentials": {
        "rabbitmq": {
          "id": "n64mgzDW7OJD0L8M",
          "name": "RabbitMQ account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// 1. Extraire le message\nconst msg =$input.first().json.options.body;\n\n\nif (msg.drive_id.includes(\"ERREUR\")) {\n  throw new Error(`ID Drive manquant dans le message ${msg.message_id}`);\n}\n\n// 3. Structurer pour le traitement\nreturn {\n  metadata: {\n    id: msg.message_id,\n    processed_at: msg.processed_at,\n    source: \"rabbitmq_consumer\"\n  },\n  document: {\n    nom: msg.nom_facture,\n    drive_id:msg.drive_id\n  },\n  destinataire: msg.recipient.email,\n  // Pour l'acquittement manuel\n  __rabbitmq: {\n    deliveryTag: msg.processed_at\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3580,
        815
      ],
      "id": "62c809b9-c715-43f1-98ed-b94549f59e66",
      "name": "on_queue"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.document.drive_id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -3360,
        815
      ],
      "id": "ce3e1be8-36bd-40a7-9408-779e0ffbbf0e",
      "name": "Download file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "YTNVu5wnfzRLnOQv",
          "name": "Google Drive account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/tmp/{{ $binary.data.fileName}}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        -3140,
        815
      ],
      "id": "d9b34417-26bf-4de5-80fb-d290d3b0178e",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -2400,
        1035
      ],
      "id": "10a81b1f-84cf-4d17-b4aa-99e832eea549",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "1QLjM2ubfq9Hx7z6",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{$json[' facture']}},{{ $json.date_de_reception }}",
        "options": {
          "systemMessage": "=Tu es un assistant spécialisé dans l’extraction automatique de données clés depuis une facture OCRisée.\nTu dois analyser le texte sémantiquement, même si les libellés changent ou que l’ordre n’est pas respecté.\nTa réponse doit être strictement un objet JSON valide avec les champs ci-dessous, et aucun texte, explication ou commentaire en dehors du JSON.\n---\nChamps obligatoires à extraire\n\nnumero_de_facture\n\nfournisseur_nom : doit apparaître au moins 2 fois (logo/haut + bas de page), cohérent avec le RIB et l’ICE.\n\nfournisseur_ice : 15 chiffres, trouvé dans les dernières zones.\n\nfournisseur_email : doit contenir @ et être cohérent avec le fournisseur_nom.\n\nclient_nom : apparaît une seule fois (mots-clés \"Client:\", \"Destinataire:\", \"Facturé à\").\n\nclient_ice : 15 chiffres, trouvé près du client dans les premières zones.\n\nmontant_total\n\ndate_de_facturation\n\ndate_d_echeance (ou null si absente)\n\ndate_de_reception : valeur fournie par {{ $json.date_réception }} (toujours ISO).\n\nrib : peut apparaître sous \"RIB\", \"numéro de compte\", \"IBAN\", \"coordonnées bancaires\".\n\nconditions_paiement : ex. \"Par virement bancaire\", \"Dans 30 jours\".\n------------------------------------------------------------------------------\nChamps facultatifs\n\nservice (désignation, produit, prestation, description).\n\n---\nRègles strictes\n\n-Format des dates : toujours ISO YYYY-MM-DD.\n\n-Pas d’invention : si une donnée est absente, ne pas l’ajouter au JSON.\n\n-Fournisseur vs Client :\n\nLe fournisseur est mentionné plusieurs fois (haut, pied de page, mentions légales).\n\nLe client est mentionné une seule fois (zone \"Client\", \"Destinataire\", \"Facturé à\").\n\nLe fournisseur et le client ont des ICE différents → déduis leur rôle selon la position.\n\n-Validation fournisseur_email : doit contenir le nom du fournisseur. Sinon, supprimer.\n\n-rib : concatène s’il est fragmenté (ex. \"Compte :\" + suite de chiffres).\n\n-Conditions de paiement : cherche expressions comme \"Par virement\", \"Conditions de règlement\", \"dans 30 jours\".\n\n-Structure JSON : toujours un objet unique, jamais de tableau, texte ou explication.\n\n---\n\nMots-clés pour recherche sémantique** *(le modèle doit les reconnaître, même en absence de libellé direct) :\n\n- numero_de_facture : [\"réf.\", \"ref.\", \"facture n°\", \"FA\", \"n° bon\", \"n° facture\"]\n- fournisseur_nom : [\"fournisseur\", \"émetteur\", \"raison sociale\"]\n- fournisseur_ice : [\"ICE\", \"I.C.E\", \"C.E\", \"identifiant fiscal\", \"n° ICE\", \"ice fournisseur\"]\n- fournisseur_email : [\"email\", \"courriel\", \"contact\", \"@\"]\n- client_nom : [\"client\", \"destinataire\", \"adressé à\", \"nom client\"]\n- client_ice : [\"ice client\", \"identifiant fiscal client\", \"n° ICE\"]\n- montant_total : [\"total TTC\", \"montant total\", \"total dû\", \"somme à payer\"]\n- date_de_facturation : [\"date de facturation\", \"date facture\", \"émise le\", \"date d’émission\"]\n- date_d_echeance : [\"date d’échéance\", \"date de paiement\", \"payable avant\", \"paiement prévu\"]\n- rib : [\"RIB\", \"numéro de compte\", \"compte bancaire\", \"IBAN\", \"coordonnées bancaires\"]\n- service : [\"désignation\", \"produit\", \"service\", \"prestations\", \"description\"]\n-\"conditions_paiement\":[\"Régelement par virement\" , \"conditions de paiement\",\"dans 30 jours\"]\n\n\n---\n\n\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -2480,
        815
      ],
      "id": "82b3f5ac-8854-426f-bcd7-e19ce8af14a1",
      "name": "LLM extraction"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a5e73cf1-c4a6-411d-95e9-1d2e34f1337d",
              "name": " facture",
              "value": "={{ $json.detected_blocks }}",
              "type": "string"
            },
            {
              "id": "f354aa07-5b45-4c1b-866b-7c71f2a2c0c3",
              "name": "date_de_reception",
              "value": "={{$('on_queue').item.json.metadata.processed_at}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2700,
        815
      ],
      "id": "343b519e-9597-484b-9a0e-c65b60b48666",
      "name": "ocr"
    },
    {
      "parameters": {
        "jsCode": "const rawOutput = $input.first().json.output;\n\n\nlet jsonStr;\ntry {\n  jsonStr = JSON.parse(rawOutput);\n} catch {\n  jsonStr = rawOutput.includes('```json')\n    ? rawOutput.split('```json')[1].split('```')[0].trim()\n    : rawOutput;\n}\n\n\nlet result = typeof jsonStr === 'object' ? jsonStr : null;\n\n\nif (!result) {\n  jsonStr = jsonStr\n    // Remove comments (// and /* */)\n    .replace(/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g, '')\n    // Remove trailing commas before } or ]\n    .replace(/,\\s*([}\\]])/g, '$1')\n    // Remove non-printable characters\n    .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, '')\n    // Normalize quotes (replace ‘ ’ “ ” with \")\n    .replace(/[‘’“”]/g, '\"');\n\n \n  try {\n    result = JSON.parse(jsonStr);\n  } catch (error) {\n    const errorPos = parseInt(error.message.match(/position (\\d+)/)?.[1]) || 0;\n    const start = Math.max(0, errorPos - 50);\n    const end = Math.min(jsonStr.length, errorPos + 50);\n    \n    throw new Error(\n      `JSON parsing error:\\n${error.message}\\n` +\n      `Context:\\n${jsonStr.slice(start, end)}\\n` +\n      `Complete JSON:\\n${jsonStr}`\n    );\n  }\n}\n\n\nif (!result.fournisseur_nom || !result.client_nom) {\n  throw new Error(\"Invalid JSON structure: must contain 'fournisseur_nom' and 'client_nom'\");\n}\n\nreturn result;\n\n\n\n\n\n\n\n\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2120,
        815
      ],
      "id": "bff8ff12-c4b3-4a2e-bc07-51b5d187f47d",
      "name": "cleaner"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://ocr-app:8000/ocr/",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2920,
        815
      ],
      "id": "d2511f90-8bce-4f62-a94d-22c7c94e8394",
      "name": "ocr-app"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.next_action }}",
                    "rightValue": "process_as_valid",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "f08cbac6-bdb5-4359-a8fe-d5a4cd346cfd"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "valid"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3494aa6e-a5fc-43e0-a04c-f55c85a84914",
                    "leftValue": "={{$json.next_action}}",
                    "rightValue": "return_to_llm",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "llm_correction"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -1680,
        690
      ],
      "id": "32b8bbdd-ccf1-4dbf-a8af-e4109f07da0f",
      "name": "Switch"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.correction_prompt }}, {{ $('ocr').item.json.facture }}",
        "options": {
          "systemMessage": "**Règles à respecter strictement** :\n\n1. Toutes les **dates doivent être au format ISO** (YYYY-MM-DD), sans les heures.\n2. Si une information **n’est pas trouvée**, **n’invente rien** et **ne l’inclus pas dans le JSON**.\n3. Le champ `fournisseur_nom` est souvent mentionné **plusieurs fois** (logo, pied de page, émetteur), tandis que `client_nom` n’est généralement mentionné **qu’une seule fois** .\n   - Si un nom apparaît plusieurs fois, c’est probablement le fournisseur.\n   - Si un nom apparaît une seule fois dans un champ comme \"adressé à\" ou \"client\", c’est probablement le client.\n4. Le fournisseur et le client **ne peuvent pas avoir le même ICE**. S’il y a deux ICE différents.\n5. Le champ `fournisseur_email` doit être **cohérent avec le nom du fournisseur**. Si ce n’est pas le cas, ajuste ou supprime.\n6. Le champ `fournisseur_ice` se trouve **souvent dans le footer** ou à côté de termes comme \"Capital\", \"R.C.\", \"Patente\", ou \"Numéro de compte\".\n7. Le champ `rib` peut apparaître sous différentes formes : \"RIB\", \"Numéro de compte\", \"Compte bancaire\", etc. Rassemble-les sémantiquement.\n8. Tous les champs doivent être **extraits par compréhension sémantique** (ex : \"émise le\" = \"date de facturation\").\n\n---\n\nMots-clés pour recherche sémantique:\n\n- numero_de_facture : [\"réf.\", \"ref.\", \"facture n°\", \"FA\", \"n° bon\", \"n° facture\"]\n- fournisseur_nom : [\"fournisseur\", \"émetteur\", \"raison sociale\"]\n- fournisseur_ice : [\"ICE\", \"I.C.E\", \"C.E\", \"identifiant fiscal\", \"n° ICE\", \"ice fournisseur\"]\n- fournisseur_email : [\"email\", \"courriel\", \"contact\", \"@\"]\n- client_nom : [\"client\", \"destinataire\", \"adressé à\", \"nom client\"]\n- client_ice : [\"ice client\", \"identifiant fiscal client\", \"n° ICE\"]\n- montant_total : [\"total TTC\", \"montant total\", \"total dû\", \"somme à payer\"]\n- date_de_facturation : [\"date de facturation\", \"date facture\", \"émise le\", \"date d’émission\"]\n- date_d_echeance : [\"date d’échéance\", \"date de paiement\", \"payable avant\", \"paiement prévu\"]\n- rib : [\"RIB\", \"numéro de compte\", \"compte bancaire\", \"IBAN\", \"coordonnées bancaires\"]\n- service : [\"désignation\", \"produit\", \"service\", \"prestations\", \"description\"]\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1240,
        940
      ],
      "id": "142b904a-9645-409e-a61c-c79bfbe5e925",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "jsCode": "const receiptData = $input.all();\n\nfunction validateReceiptInfo(receiptData) {\n    const validationResults = [];\n    \n    // Consider all error types as LLM-correctable first\n    const llmCorrectableErrors = [\n        \"date format\",\n        \"email format\",\n        \"name matching\",\n        \"missing field\",\n        \"bank format\",\n        \"ice format\"\n    ];\n\n    const requiredFields = [\n        \"numero_de_facture\",\n        \"fournisseur_nom\",\n        \"fournisseur_ice\",\n        \"fournisseur_email\",\n        \"client_nom\",\n        \"client_ice\",\n        \"montant_total\",\n        \"date_de_facturation\",\n        \"date_de_reception\",\n        \"rib\"\n    ];\n\n    receiptData.forEach((item, index) => {\n        const errors = [];\n        const receipt = item.json;\n        const result = { \n            original: {...receipt},\n            validation: { errors: [], needs_llm_correction: false, needs_user_intervention: false }\n        };\n\n        // Handle optional fields\n        if (!receipt.hasOwnProperty('date_d_echeance')) {\n            result.original.date_d_echeance = null;\n        }\n        if (!receipt.hasOwnProperty('service') || receipt.service === null || receipt.service.trim() === \"\") {\n            result.original.service = \"à vérifier par l'utilisateur\";\n        }\n\n        // Validate required fields\n        requiredFields.forEach(field => {\n            if (!receipt.hasOwnProperty(field)) {\n                errors.push({ \n                    field, \n                    message: `Champ requis manquant: ${field}`, \n                    type: \"missing field\" \n                });\n                result.original[field] = \"\";\n            } else if (receipt[field] === \"\") {\n                errors.push({ \n                    field, \n                    message: `Champ requis vide: ${field}`, \n                    type: \"missing field\" \n                });\n            }\n        });\n\n        // ICE Validation\n        if (receipt.fournisseur_ice && !/^\\d{15}$/.test(receipt.fournisseur_ice)) {\n            errors.push({ \n                field: \"fournisseur_ice\", \n                message: \"Fournisseur ICE invalide (15 chiffres requis)\", \n                type: \"ice format\" \n            });\n        }\n        if (receipt.client_ice && !/^\\d{15}$/.test(receipt.client_ice)) {\n            errors.push({ \n                field: \"client_ice\", \n                message: \"Client ICE invalide (15 chiffres requis)\", \n                type: \"ice format\" \n            });\n        }\nif (receipt.client_ice==receipt.fournisseur_ice) {\n            errors.push({ \n                field: \"client_ice\", \n                message: \"les ices doivent être différents\", \n                type: \"ice format\" \n            });\n        }\n\n        // Date Validation\n        const dateFields = [\"date_de_facturation\", \"date_d_echeance\", \"date_de_reception\"];\n        dateFields.forEach(field => {\n            if (receipt[field] && receipt[field] !== null && !/^\\d{4}-\\d{2}-\\d{2}$/.test(receipt[field])) {\n                errors.push({ \n                    field, \n                    message: `${field} format invalide (YYYY-MM-DD requis)`, \n                    type: \"date format\" \n                });\n            }\n        });\n\n        // Email Validation\n        if (receipt.fournisseur_email) {\n            const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n            if (!emailRegex.test(receipt.fournisseur_email)) {\n                errors.push({ \n                    field: \"fournisseur_email\", \n                    message: \"Format email invalide\", \n                    type: \"email format\" \n                });\n            }\n        }\n\n        // Name Comparison\n        if (receipt.client_nom && receipt.fournisseur_nom &&\n            receipt.client_nom.toLowerCase() === receipt.fournisseur_nom.toLowerCase()) {\n            errors.push({ \n                field: \"client_nom/fournisseur_nom\",\n                message: \"Noms client et fournisseur identiques\",\n                type: \"name matching\"\n            });\n        }\n\n        // RIB Validation\n        if (receipt.rib && !/^\\d{24}$/.test(receipt.rib.replace(/\\s+/g, ''))) {\n            errors.push({ \n                field: \"rib\",\n                message: \"RIB marocain invalide (24 chiffres requis)\",\n                type: \"bank format\"\n            });\n        }\n\n        // Mark all errors as LLM-correctable first\n        result.validation.errors = errors;\n        result.validation.needs_llm_correction = errors.length > 0;\n        result.validation.needs_user_intervention = false; // Will be determined later after LLM attempt\n\n        validationResults.push(result);\n    });\n\n    return [{\n        json: {\n            validation_results: validationResults,\n            next_action: validationResults.some(r => r.validation.errors.length > 0) \n                        ? \"return_to_llm\" \n                        : \"process_as_valid\",\n            summary: {\n                valid_count: validationResults.filter(r => r.validation.errors.length === 0).length,\n                total_issues: validationResults.reduce((sum, r) => sum + r.validation.errors.length, 0)\n            }\n        }\n    }];\n}\n\nreturn validateReceiptInfo(receiptData);"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1900,
        815
      ],
      "id": "4337532e-c2e7-4e0e-a4f9-755ea74bcda5",
      "name": "Validation"
    },
    {
      "parameters": {
        "jsCode": "const validation=$input.first().json.validation_results[0].validation;\nconst originalResult=$input.first().json.validation_results[0].original;\n\n\n// Mapping des instructions de correction par type d'erreur\nconst correctionInstructions = {\n  \"date format\": (field) => `• Corrige le format de ${field} en YYYY-MM-DD (ex: \"2023/12/01\" → \"2023-12-01\")`,\n  \"email format\": (field) => `• Vérifie que ${field} contient '@' et correspond au nom du fournisseur`,\n  \"name matching\": (field) => `• Assure la cohérence entre ${field} et le nom du fournisseur principal`,\n  \"missing field\": (field) => {\n    const keywords = {\n      \"client_nom\": \"Recherche 'Client:', 'Destinataire:', 'Facturé à'\",\n      \"fournisseur_ice\": \"Vérifie le footer pour 'ICE', 'Identifiant fiscal'\",\n      // Ajouter d'autres champs au besoin\n    };\n    return `• ${field} manquant - ${keywords[field] || 'Cherche dans le document'}`;\n  },\n  \"bank format\": (field) => `• Nettoie le ${field} en supprimant les espaces (ex: \"123 456\" → \"123456\")`,\n  \"ice format\": (field) => `• ${field} doit avoir 15 chiffres exactement - vérifie le document`\n};\n\n// Générer les instructions spécifiques\nconst errorsList = validation.errors.map(error => {\n  const handler = correctionInstructions[error.type] || (f => `• Corrige le champ ${f}`);\n  return handler(error.field);\n}).join('\\n');\n\n// Construire le prompt final\nconst prompt = `ERREURS DÉTECTÉES DANS L'EXTRACTION Dans la FACTURE:\n\n\n\n${validation.errors.map(e => `- ${e.message}`).join('\\n')}\n\nINSTRUCTIONS DE CORRECTION:\n${errorsList}\n\nRésultats faux:\n${JSON.stringify(originalResult, null, 2)}\n\nRÈGLES:\n1.Revérifiez si les données sont cohérentes et  corrige  les erreurs listées\n2. Conserve la structure JSON\n3. Pour les dates: strictement YYYY-MM-DD\n4. ICE: 15 chiffres exactement et l'ice de fournisseur se trouvent à les derniers zones\n5. RIB: sans espaces\n\nRENVOIE UNIQUEMENT LE JSON CORRIGÉ SANS COMMENTAIRES.`;\n\nreturn [{ json: { correction_prompt: prompt } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1460,
        940
      ],
      "id": "0e7f208d-d84b-4619-b3b1-b2af3eba7fde",
      "name": "Code"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -1160,
        1160
      ],
      "id": "72c761ad-34ce-4ac0-9314-113d7c81837c",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "1QLjM2ubfq9Hx7z6",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const rawOutput = $input.first().json.output;\n\n\nlet jsonStr;\ntry {\n  jsonStr = JSON.parse(rawOutput);\n} catch {\n  jsonStr = rawOutput.includes('```json')\n    ? rawOutput.split('```json')[1].split('```')[0].trim()\n    : rawOutput;\n}\n\n\nlet result = typeof jsonStr === 'object' ? jsonStr : null;\n\n\nif (!result) {\n  jsonStr = jsonStr\n    // Remove comments (// and /* */)\n    .replace(/\\/\\/.*|\\/\\*[\\s\\S]*?\\*\\//g, '')\n    // Remove trailing commas before } or ]\n    .replace(/,\\s*([}\\]])/g, '$1')\n    // Remove non-printable characters\n    .replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, '')\n    // Normalize quotes (replace ‘ ’ “ ” with \")\n    .replace(/[‘’“”]/g, '\"');\n\n \n  try {\n    result = JSON.parse(jsonStr);\n  } catch (error) {\n    const errorPos = parseInt(error.message.match(/position (\\d+)/)?.[1]) || 0;\n    const start = Math.max(0, errorPos - 50);\n    const end = Math.min(jsonStr.length, errorPos + 50);\n    \n    throw new Error(\n      `JSON parsing error:\\n${error.message}\\n` +\n      `Context:\\n${jsonStr.slice(start, end)}\\n` +\n      `Complete JSON:\\n${jsonStr}`\n    );\n  }\n}\n\n\nif (!result.fournisseur_nom || !result.client_nom) {\n  throw new Error(\"Invalid JSON structure: must contain 'fournisseur_nom' and 'client_nom'\");\n}\n\nreturn result;\n\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        1065
      ],
      "id": "9490a52e-7c7d-4c4e-a5e2-f4c066807ad7",
      "name": "cleaner1"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1u8en2pmo1FY0xqljDNan9uOyjK6Dss7gqMcN7sbWRt8",
          "mode": "list",
          "cachedResultName": "factures_test",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1u8en2pmo1FY0xqljDNan9uOyjK6Dss7gqMcN7sbWRt8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1u8en2pmo1FY0xqljDNan9uOyjK6Dss7gqMcN7sbWRt8/edit#gid=0"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "facture_numero",
              "displayName": "facture_numero",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "fournisseur_nom",
              "displayName": "fournisseur_nom",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "fournisseur_ice",
              "displayName": "fournisseur_ice",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "fournisseur_email",
              "displayName": "fournisseur_email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "client_nom",
              "displayName": "client_nom",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "client_ice",
              "displayName": "client_ice",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "total_ht",
              "displayName": "total_ht",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "rib",
              "displayName": "rib",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "date_facturation",
              "displayName": "date_facturation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "date_echeance",
              "displayName": "date_echeance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "date_de_réception",
              "displayName": "date_de_réception",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "cellFormat": "USER_ENTERED"
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.6,
      "position": [
        -800,
        640
      ],
      "id": "07a1361f-6962-481e-90a5-9ad39f2a4b31",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "3BA8KtbrkLYj5HVy",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9139de99-22dc-4425-8c53-b643a65f3c0b",
              "name": "id",
              "value": "={{$('on_queue').item.json.document.drive_id}}",
              "type": "string"
            },
            {
              "id": "f92925ab-90dd-4353-9883-8bd3ccefb74d",
              "name": "facture_numero",
              "value": "={{ $json.numero_de_facture }}",
              "type": "string"
            },
            {
              "id": "bf6f1372-bc1e-4275-9558-868da6b2150c",
              "name": "fournisseur_nom",
              "value": "={{ $json.fournisseur_nom }}",
              "type": "string"
            },
            {
              "id": "6b008dbc-10af-4655-8e8b-075d9862184d",
              "name": "fournisseur_ice",
              "value": "={{ $json.fournisseur_ice }}",
              "type": "string"
            },
            {
              "id": "e5f1e991-2fcd-4a33-aeec-95ea0170c5af",
              "name": "fournisseur_email",
              "value": "={{ $json.fournisseur_email }}",
              "type": "string"
            },
            {
              "id": "5ade9621-33ef-46c8-b2cb-d78a65442579",
              "name": "client_nom",
              "value": "={{ $json.client_nom }}",
              "type": "string"
            },
            {
              "id": "9206c210-8290-470f-8433-cbfba3f177de",
              "name": "client_ice",
              "value": "={{ $json.client_ice }}",
              "type": "string"
            },
            {
              "id": "17f1e40d-0f2d-41ed-a6db-e4546f72b7c7",
              "name": "total_ttc",
              "value": "={{ $json.montant_total }}dh",
              "type": "string"
            },
            {
              "id": "4c8d80d0-366f-42a8-8aba-a5b15ba2ddba",
              "name": "rib",
              "value": "={{ $json.rib }}",
              "type": "string"
            },
            {
              "id": "66847825-24e5-40f0-9495-d991fc0a797b",
              "name": "date_facturation",
              "value": "={{ $json.date_de_facturation }}",
              "type": "string"
            },
            {
              "id": "9f5de4f6-35a6-418e-bab6-6e583ccb453b",
              "name": "date_echeance",
              "value": "={{ $json.date_d_echeance }}",
              "type": "string"
            },
            {
              "id": "1d3bdb04-024d-4928-932f-01dab907d50b",
              "name": "date_de_réception",
              "value": "={{ $json.date_de_reception }}",
              "type": "string"
            },
            {
              "id": "61fd02c8-8464-405b-b150-8abfa6653ef8",
              "name": "status_paiement",
              "value": "False",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1080,
        640
      ],
      "id": "e7bb4258-e8e8-4174-8627-eb3a78b86f91",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "jsCode": "const data = $input.all()[0].json;\n\nfunction renderAsHTML(obj, level = 0) {\n  let html = '';\n  const indent = '  '.repeat(level);\n\n  if (Array.isArray(obj)) {\n    if (obj.length === 0) return '';\n    \n    html += `${indent}<ul style=\"margin: 0 0 16px 0; padding-left: 24px; list-style-type: none;\">\\n`;\n    obj.forEach(item => {\n      html += `${indent}  <li style=\"margin-bottom: 8px;\">`;\n      html += renderAsHTML(item, level + 1);\n      html += `</li>\\n`;\n    });\n    html += `${indent}</ul>\\n`;\n    return html;\n  }\n\n  if (typeof obj === 'object' && obj !== null) {\n    html += `${indent}<div style=\"margin-bottom: ${level ? '8px' : '0'}; ${level ? 'border-left: 2px solid #1976D2; padding-left: 12px;' : ''}\">\\n`;\n    \n    for (const [key, value] of Object.entries(obj)) {\n      if (value === null || value === undefined || value === '') continue;\n      \n      html += `${indent}  <div style=\"margin-bottom: 8px; display: flex; align-items: baseline;\">\\n`;\n      html += `${indent}    <div style=\"flex: 0 0 160px; font-weight: 600; color: #1976D2;\">${key}:</div>\\n`;\n      html += `${indent}    <div style=\"flex: 1; font-weight: ${typeof value === 'number' ? '600' : '400'}\">${renderAsHTML(value, level + 1)}</div>\\n`;\n      html += `${indent}  </div>\\n`;\n    }\n    \n    html += `${indent}</div>\\n`;\n    return html;\n  }\n\n  // Formatage spécial pour les nombres\n  if (typeof obj === 'number') {\n    return `<span style=\"font-weight: 600\">${obj.toLocaleString()}</span>`;\n  }\n\n  return String(obj);\n}\n\nconst message = `\n<div style=\"font-family: Arial, sans-serif; max-width: 700px; margin: 0 auto; border: 1px solid #e0e0e0;\">\n  <div style=\"background: #1976D2; padding: 16px 20px;\">\n    <div style=\"color: white; font-size: 18px; font-weight: 600;\">DÉTAILS FACTURE</div>\n  </div>\n  \n  <div style=\"padding: 20px; background: white;\">\n    ${renderAsHTML(data)}\n  </div>\n  \n  <div style=\"padding: 12px 20px; background: #f5f5f5; text-align: right; font-size: 12px; color: #757575;\">\n    Message automatique\n  </div>\n</div>\n`;\n\nreturn {\n  items: [{ json: { message } }]\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        440
      ],
      "id": "c362a41c-98f5-4f28-920d-4ee3ec148e5a",
      "name": "message"
    },
    {
      "parameters": {
        "sendTo": "={{ $('on_queue').item.json.destinataire }}",
        "subject": "=Récapitulatif de votre facture [{{ $('Code3').item.json.numero_de_facture }}/{{ $('Code3').item.json.fournisseur_nom}}]",
        "message": "={{ $json.items.first().json.message }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -660,
        440
      ],
      "id": "d737c7fd-55b1-457e-9907-8db1c53741cd",
      "name": "Envoiedesdétails",
      "webhookId": "7f2a8343-4527-4137-9cee-48820a54545c",
      "credentials": {
        "gmailOAuth2": {
          "id": "1ln0gj9ATTlTrRdy",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "labelIds": [
            "INBOX"
          ]
        },
        "options": {
          "downloadAttachments": true
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -3800,
        80
      ],
      "id": "0b93a30a-8f31-4d5b-858e-60779b76aa9f",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "1ln0gj9ATTlTrRdy",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "queue": "factures_a_traiter",
        "options": {
          "durable": true,
          "headers": {
            "header": [
              {
                "key": "source",
                "value": "={{ $json.options.headers.source }}"
              },
              {
                "key": "priority ",
                "value": "={{ $json.options.headers.priority }}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.rabbitmq",
      "typeVersion": 1.1,
      "position": [
        -1820,
        80
      ],
      "id": "c94d8302-4234-47c9-b8d0-267f70725d3e",
      "name": "RabbitMQ",
      "credentials": {
        "rabbitmq": {
          "id": "n64mgzDW7OJD0L8M",
          "name": "RabbitMQ account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6d718884-a79c-4db2-84d9-132989fa389f",
              "name": "=message_id",
              "value": "={{ $('If').item.json.id }}",
              "type": "string"
            },
            {
              "id": "6525eb9b-4ff1-459c-9189-0ed6fdc62189",
              "name": "drive_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "bdab7e72-b816-4223-bb4f-a4d2b1845aba",
              "name": "nom_facture",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "0d00046d-a40c-482f-a3cd-cc9e04b80689",
              "name": "recipient",
              "value": "={{ $('If').item.json.to.value[0].address}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2260,
        80
      ],
      "id": "d6c0569f-7be2-4ba9-9d1d-31da4e8c73c4",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "74467833-dc32-4e4b-b663-073b973ad455",
              "leftValue": "={{ $('Gmail Trigger').item.json.subject }}",
              "rightValue": "facture",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "a49fe634-6a5f-429a-8510-d218e4e1119e",
              "leftValue": "={{ $('Gmail Trigger').item.binary }}",
              "rightValue": "Facture",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3600,
        140
      ],
      "id": "4d32d70d-1953-4e1f-b1fd-dc34cbe14f4b",
      "name": "If"
    },
    {
      "parameters": {
        "jsCode": "let results = [];\n\nfor (item of items) {\n    \n    let newItem = {\n        json: { ...item.json }, \n        binary: {} \n    };\n\n    // Filter binary attachments (exclude 'CRA')\n    for (key of Object.keys(item.binary)) {\n        if (!item.binary[key].fileName.includes('CRA')) {\n            newItem.binary[key] = item.binary[key];\n        }\n    }\n\n\n    if (Object.keys(newItem.binary).length > 0) {\n        results.push(newItem);\n    }\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2920,
        -20
      ],
      "id": "71f6655b-27bb-4ede-beaa-d111703958f1",
      "name": "cra_filter"
    },
    {
      "parameters": {
        "jsCode": "let results = [];\n\nfor (item of items) {\n   \n    let newItem = {\n        json: { ...item.json },  \n        binary: {} \n    };\n\n    // Filter binary attachments (exclude 'CRA')\n    for (key of Object.keys(item.binary)) {\n        if (!item.binary[key].fileName.includes('CRA')) {\n            newItem.binary[key] = item.binary[key];\n        }\n    }\n\n\n    if (Object.keys(newItem.binary).length > 0) {\n        results.push(newItem);\n    }\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3360,
        180
      ],
      "id": "9f56551d-86d5-4283-94d8-5370b3a02ab7",
      "name": "cra_filter1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "44f0bde5-8bb2-4363-8c8c-e4ef78032fd9",
              "name": "attachement",
              "value": "={{ $('cra_filter1').item.binary.keys() }}",
              "type": "array"
            },
            {
              "id": "77e662f1-db0b-4845-be73-861464c268a9",
              "name": "message_id",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3140,
        180
      ],
      "id": "c09bc382-b76f-44b3-8387-92d81ed800f1",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "fieldToSplitOut": "attachement",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -2920,
        180
      ],
      "id": "d6ebd6ea-ff82-4f9a-915d-abf147b6f627",
      "name": "Split Out"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "message_id",
              "field2": "id"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2700,
        80
      ],
      "id": "df1b4e49-a80e-4246-a065-a6b87a9ddf39",
      "name": "Merge"
    },
    {
      "parameters": {
        "inputDataFieldName": "={{$json.attachement}}",
        "name": "={{ $('Merge').item.binary.attachment_0.fileName }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1Q18wwNi_G3qjZtcfFGOh10jQrLcDPSfw",
          "mode": "list",
          "cachedResultName": "n8n_test",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1Q18wwNi_G3qjZtcfFGOh10jQrLcDPSfw"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -2480,
        80
      ],
      "id": "766ac1cf-5707-4356-94aa-75a05900c197",
      "name": "Upload file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "YTNVu5wnfzRLnOQv",
          "name": "Google Drive account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const generateMessageId = () => {\n  const timestamp = new Date().getTime();\n  const random = Math.random().toString(36).substring(2, 10);\n  return `${timestamp}-${random}`;\n};\n\n\nconst message = {\n  message_id: $input.all()[0]?.json?.message_id || generateMessageId(),\n  drive_id: $input.all()[0]?.json?.drive_id || \"ERREUR: ID_MANQUANT\", // Fallback explicite\n  nom_facture: $input.all()[0]?.json?.nom_facture ,\n  recipient: {\n    email: $input.all()[0]?.json?.recipient\n\n  },\n  processed_at: new Date().toISOString() // Format standard\n};\n\n// 3. Config RabbitMQ (sans binary inutile)\nreturn {\n  queue: \"factures_a_traiter\",\n  options: {\n    durable: true,\n    delivery_mode: 2,\n    headers: {\n      source: \"n8n_email_processor\",\n      priority: 1 // Optionnel pour trier les messages\n    },\n    body: message\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2040,
        80
      ],
      "id": "bffcd947-21c3-419c-ba87-8f2a51d40d95",
      "name": "Code1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "44f0bde5-8bb2-4363-8c8c-e4ef78032fd9",
              "name": "attachement",
              "value": "={{ $('cra_filter2').item.binary.keys() }}",
              "type": "array"
            },
            {
              "id": "77e662f1-db0b-4845-be73-861464c268a9",
              "name": "message_id",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3140,
        1525
      ],
      "id": "08609207-0c85-47ac-ba21-4acbc6a1455e",
      "name": "Edit Fields5"
    },
    {
      "parameters": {
        "queue": "factures_a_traiter",
        "options": {
          "durable": true
        }
      },
      "type": "n8n-nodes-base.rabbitmq",
      "typeVersion": 1.1,
      "position": [
        -1820,
        1425
      ],
      "id": "ede63171-4e7b-4a73-9751-a356ed75a900",
      "name": "RabbitMQ1",
      "credentials": {
        "rabbitmq": {
          "id": "n64mgzDW7OJD0L8M",
          "name": "RabbitMQ account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "let results = [];\n\nfor (item of items) {\n    \n    let newItem = {\n        json: { ...item.json }, \n        binary: {} \n    };\n\n    // Filter binary attachments (exclude 'CRA')\n    for (key of Object.keys(item.binary)) {\n        if (!item.binary[key].fileName.includes('CRA')) {\n            newItem.binary[key] = item.binary[key];\n        }\n    }\n\n\n    if (Object.keys(newItem.binary).length > 0) {\n        results.push(newItem);\n    }\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2920,
        1325
      ],
      "id": "ef7f56c2-8b8e-4eeb-a8a2-6c8b2b8bee79",
      "name": "cra_filter4"
    },
    {
      "parameters": {
        "fieldToSplitOut": "attachement",
        "include": "allOtherFields",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        -2920,
        1525
      ],
      "id": "ba3d0fdc-7426-4837-87b3-66e4edf55f98",
      "name": "Split Out1"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "message_id",
              "field2": "id"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2700,
        1425
      ],
      "id": "77cc57bd-fce8-4e01-b6a8-48307d246ca0",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "let results = [];\n\nfor (item of items) {\n   \n    let newItem = {\n        json: { ...item.json },  \n        binary: {} \n    };\n\n    // Filter binary attachments (exclude 'CRA')\n    for (key of Object.keys(item.binary)) {\n        if (!item.binary[key].fileName.includes('CRA')) {\n            newItem.binary[key] = item.binary[key];\n        }\n    }\n\n\n    if (Object.keys(newItem.binary).length > 0) {\n        results.push(newItem);\n    }\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3360,
        1525
      ],
      "id": "7f846d5a-8dc3-437a-9807-7d1feca302a4",
      "name": "cra_filter2"
    },
    {
      "parameters": {
        "inputDataFieldName": "={{$json.attachement}}",
        "name": "={{ $('Merge1').item.binary.attachment_0.fileName }}",
        "driveId": {
          "__rl": true,
          "mode": "list",
          "value": "My Drive"
        },
        "folderId": {
          "__rl": true,
          "value": "1Q18wwNi_G3qjZtcfFGOh10jQrLcDPSfw",
          "mode": "list",
          "cachedResultName": "n8n_test",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1Q18wwNi_G3qjZtcfFGOh10jQrLcDPSfw"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -2480,
        1425
      ],
      "id": "928a00ed-9ef7-47b8-99e7-194023f28eb6",
      "name": "Upload file1",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "YTNVu5wnfzRLnOQv",
          "name": "Google Drive account 2"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "74467833-dc32-4e4b-b663-073b973ad455",
              "leftValue": "={{ $('Gmail Trigger1').item.json.subject }}",
              "rightValue": "facture",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "a49fe634-6a5f-429a-8510-d218e4e1119e",
              "leftValue": "={{ $('Gmail Trigger1').item.binary }}",
              "rightValue": "Facture",
              "operator": {
                "type": "object",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3580,
        1425
      ],
      "id": "eceba11d-8bb9-4cc9-a5d3-63db397c757a",
      "name": "If1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6d718884-a79c-4db2-84d9-132989fa389f",
              "name": "=message_id",
              "value": "={{ $('If1').item.json.id }}",
              "type": "string"
            },
            {
              "id": "6525eb9b-4ff1-459c-9189-0ed6fdc62189",
              "name": "drive_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "bdab7e72-b816-4223-bb4f-a4d2b1845aba",
              "name": "nom_facture",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "0d00046d-a40c-482f-a3cd-cc9e04b80689",
              "name": "recipient",
              "value": "={{ $('If1').item.json.to.value[0].address}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2260,
        1425
      ],
      "id": "e65d3d4c-cb9d-4e81-af07-e551b884c844",
      "name": "Edit Fields4"
    },
    {
      "parameters": {
        "jsCode": "// 1. Générer un ID unique plus robuste\nconst generateMessageId = () => {\n  const timestamp = new Date().getTime();\n  const random = Math.random().toString(36).substring(2, 10);\n  return `${timestamp}-${random}`;\n};\n\n// 2. Préparer les données du message\nconst message = {\n  message_id: $input.all()[0]?.json?.message_id || generateMessageId(),\n  drive_id: $input.all()[0]?.json?.drive_id || \"ERREUR: ID_MANQUANT\", // Fallback explicite\n  nom_facture: $input.all()[0]?.json?.nom_facture ,\n  recipient: {\n    email: $input.all()[0]?.json?.recipient\n\n  },\n  processed_at: new Date().toISOString() // Format standard\n};\n\n// 3. Config RabbitMQ (sans binary inutile)\nreturn {\n  queue: \"factures_a_traiter\",\n  options: {\n    durable: true,\n    delivery_mode: 2,\n    headers: {\n      source: \"n8n_email_processor\",\n      priority: 1 // Optionnel pour trier les messages\n    },\n    body: message\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2040,
        1425
      ],
      "id": "69c6cdd5-fd0a-4e40-892c-e4e4386e5099",
      "name": "Code2"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "simple": false,
        "filters": {
          "labelIds": [
            "INBOX"
          ]
        },
        "options": {
          "downloadAttachments": "={{ true }}"
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.2,
      "position": [
        -3800,
        1425
      ],
      "id": "b4562b59-4e83-4aed-8cbe-bd1b19eb9b1e",
      "name": "Gmail Trigger1",
      "credentials": {
        "gmailOAuth2": {
          "id": "DDPYY7JHdcmpDDY6",
          "name": "umi"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "91bf7120-daa9-4254-8808-c0aa6f5e04df",
              "name": "Numéro de facture",
              "value": "={{ $json.numero_de_facture }}",
              "type": "string"
            },
            {
              "id": "948322b4-bf47-4ca6-be32-744cf2e9d47c",
              "name": "Nom de fournisseur ",
              "value": "={{ $json.fournisseur_nom }}",
              "type": "string"
            },
            {
              "id": "ef6ee27d-94ef-4146-9971-31194048e7e7",
              "name": "ICE de fournissuer",
              "value": "={{ $json.fournisseur_ice }}",
              "type": "string"
            },
            {
              "id": "4a9113d0-a692-488d-8fb5-d6b4b2f7686a",
              "name": "Email de fournisseur ",
              "value": "={{ $json.fournisseur_email }}",
              "type": "string"
            },
            {
              "id": "0524383d-f0cd-4ed0-89bd-61cc1656b752",
              "name": "Nom de client ",
              "value": "={{ $json.client_nom }}",
              "type": "string"
            },
            {
              "id": "3a2ffb6b-322d-43e0-be13-d6acefb0f16a",
              "name": "ICE de client",
              "value": "={{ $json.client_ice }}",
              "type": "string"
            },
            {
              "id": "9d7c842a-aca2-419a-9804-7da3677bdff2",
              "name": "Service ",
              "value": "={{ $json.service }}",
              "type": "string"
            },
            {
              "id": "3f093c7c-84ea-46c3-ae8f-0e66e9c01167",
              "name": "Montant total ",
              "value": "={{$json.montant_total }}Dhs",
              "type": "string"
            },
            {
              "id": "55ac1432-61fa-472e-af61-7c51541d354b",
              "name": "RIB",
              "value": "={{ $json.rib }}",
              "type": "string"
            },
            {
              "id": "5bf63018-5e5d-4016-80b6-a96fe035f949",
              "name": "Date de facturation",
              "value": "={{ $json.date_de_facturation }}",
              "type": "string"
            },
            {
              "id": "8b7d390b-f01f-4155-a5fd-9d32c4a663d4",
              "name": "Date d'échéance ",
              "value": "={{ $json.date_d_echeance }}",
              "type": "string"
            },
            {
              "id": "b50d314d-be2b-4986-b05e-153465e671ce",
              "name": "Date de réception ",
              "value": "={{ $json.date_de_reception }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1170,
        440
      ],
      "id": "fcdba67d-52e5-42fa-926d-705124c31f35",
      "name": "info_extraction"
    },
    {
      "parameters": {
        "jsCode": "const originalResult=$input.first().json.validation_results[0].original;\nreturn originalResult;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1460,
        540
      ],
      "id": "48caae00-be2e-47ca-87f6-33aaf603baf6",
      "name": "Code3"
    },
    {
      "parameters": {
        "sendTo": "={{ $json.from.value.first().address}}",
        "subject": "Confirmation de la réception de la facture ",
        "message": "<p>Bonjour ,<p><p>votre facture a été bien reçu<p><p>Cordialement <p><small style=\"color:#888;\">Ceci est un message automatique.</small>",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -3360,
        1240
      ],
      "id": "26455eaa-5f13-4b96-907c-30c888d8b262",
      "name": "Send a message",
      "webhookId": "18d2a5e6-ad49-4a84-a69c-750bd0fbbfe3",
      "credentials": {
        "gmailOAuth2": {
          "id": "DDPYY7JHdcmpDDY6",
          "name": "umi"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "={{ $json.from.value.first().address}}",
        "subject": "Confirmation de la réception de la facture ",
        "message": "<p>Bonjour ,<p><p>votre facture a été bien reçu<p><p>Cordialement <p><small style=\"color:#888;\">Ceci est un message automatique.</small>",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -3440,
        -140
      ],
      "id": "32468581-2a00-486f-9281-2de43794870b",
      "name": "Send a message1",
      "webhookId": "18d2a5e6-ad49-4a84-a69c-750bd0fbbfe3",
      "credentials": {
        "gmailOAuth2": {
          "id": "DDPYY7JHdcmpDDY6",
          "name": "umi"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "RabbitMQ Trigger": {
      "main": [
        [
          {
            "node": "on_queue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "on_queue": {
      "main": [
        [
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download file": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "ocr-app",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "LLM extraction",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "LLM extraction": {
      "main": [
        [
          {
            "node": "cleaner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ocr": {
      "main": [
        [
          {
            "node": "LLM extraction",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cleaner": {
      "main": [
        [
          {
            "node": "Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ocr-app": {
      "main": [
        [
          {
            "node": "ocr",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Code3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "cleaner1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "cleaner1": {
      "main": [
        [
          {
            "node": "Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "message": {
      "main": [
        [
          {
            "node": "Envoiedesdétails",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "cra_filter1",
            "type": "main",
            "index": 0
          },
          {
            "node": "cra_filter",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cra_filter": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "cra_filter1": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Upload file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "RabbitMQ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields5": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cra_filter4": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Upload file1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "cra_filter2": {
      "main": [
        [
          {
            "node": "Edit Fields5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload file1": {
      "main": [
        [
          {
            "node": "Edit Fields4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "cra_filter2",
            "type": "main",
            "index": 0
          },
          {
            "node": "cra_filter4",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields4": {
      "main": [
        [
          {
            "node": "Code2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code2": {
      "main": [
        [
          {
            "node": "RabbitMQ1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail Trigger1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "info_extraction": {
      "main": [
        [
          {
            "node": "message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code3": {
      "main": [
        [
          {
            "node": "info_extraction",
            "type": "main",
            "index": 0
          },
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "aa812eb6-3f37-4265-a0cf-e78b4594af18",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "06c7a68a8d81ecd4406854094919ab699bf2c4fab2920df5e9355fbb2943f752"
  },
  "id": "48F8NMgMWgx2uKhd",
  "tags": []
}